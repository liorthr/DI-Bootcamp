import BaseDataInput from "./BaseDataInput";
import ChargeRequest from "./ChargeRequest";
import { EventNames, InitHostedFieldsData } from "./types";
export default abstract class PayPlusHostedFields {
    abstract DataInput: BaseDataInput;
    InitPaymentPage: any;
    ChargeRequest: typeof ChargeRequest;
    private config;
    private numberOfAttempts;
    private __page_request_uid;
    private __hosted_fields_uuid;
    private __paymentPageData;
    private __origin;
    private __paymentPageDfrd;
    private __AwaitingFields;
    private __hostedFields;
    private __expirySeparateFields;
    private __recaptchaReplacementElm;
    private __recaptchaIframeElm;
    private __showRecaptcha;
    private __recaptchaToken;
    private __securee3dsIframeElm;
    constructor();
    protected init(): void;
    SetConfig(key: string, value: any): void;
    SetMainFields(fldsData: InitHostedFieldsData): this;
    SetRecaptcha(elmSelector: string): this;
    AddField(fld: string, elmSelector: string, wrapperElmSelector?: string): this;
    CreatePaymentPage(data: {
        origin: string;
        page_request_uid: string;
        hosted_fields_uuid: string;
    }): Promise<void>;
    SubmitPayment(): any;
    GetRemainingAttempts(): number;
    Upon(event: EventNames, callback: (data: any) => void): void;
    ResetInputs(): void;
    private initNonHostedField;
    private initPaymentPage;
    private showField;
    private listenForMessages;
    private event_ccType;
    private event_init;
    private event_srvResponseMsg;
    private outOfAttempts;
    private setPageExpiration;
    private toggleDisableForm;
    private fireCustomEvent;
    private formResponse;
    private collectChargeParameters;
    private readyToSubmit;
    private initHostedFieldIframe;
    private toggleSecure3dsIframe;
    private initRecaptcha;
    private hideCVVIframe;
    private removeFieldAndWrapper;
    private validateOrThrow;
    private addCSS;
}
